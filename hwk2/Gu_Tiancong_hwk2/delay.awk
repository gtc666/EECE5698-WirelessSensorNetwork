BEGIN {	printf "Start:\n";	node_s = 0;	node_r = 0;	totoal_node = 49;	packet_id_temp = 0;	packet_id[1000];	packet_start[5000];	packet_end[5000];	count = 0;	total_delay = 0;	avg_delay = 0;	flag =0;	packetid_sentbysender[200];	sender[25];	c_sender = 0;	first_time = -1;	last_time = 0;	node_count = 49;}{	if ($1 < 50) {		sender[c_sender] = $1;		printf "sender: %s\n",sender[c_sender];			c_sender = c_sender+1;	}	for (i = 0; i < c_sender; i++){		if ( substr($24,3,1) == ":" ) {			sender_temp = 	substr($24,2,1);		}else{			sender_temp = 	substr($24,2,2);		}		if ($1 == "s" && $4 == "AGT" &&  sender_temp == sender[i]){			packetid_sentbysender[$6] = $2;			n = n+1;		}	}}{	if ($1 == "r" && $4 == "RTR" && $3 == "_24_"){		node_s = substr($24,2,2);		node_r = substr($25,1,2);		if ( substr($24,3,1) == ":" ) {			node_s = substr($24,2,1);		}else{			node_s = substr($24,2,2);		}		if (node_r == 24 && node_r - node_s) {			if (packet_id[count-1] == $6){				printf "%d:  %d different routrs from %d to %d\n", count-1, $6, node_s, node_r;			}else{				packet_id[count] = $6;				count = count + 1;			}		}	}		if ($6 == packet_id[count-1] && $1 == "r" && $3 == "_24_" && $4 == "AGT"){			packet_end[count-1] = $2;		}}{  if (($1 == "r")  ) {    last_time = $2;  }    if ( (first_time == -1) && ( $1 == "s" ) )        first_time = $2;       if ( ( $1 == "s" ) || ($1 == "r") ) {     if ( substr($3,3,1) == "_" ) {		node_id = substr($3,2,1);     }else{		node_id = substr($3,2,2);     }     if (energy_initial[node_id] == 0){     	energy_initial[node_id] = $14 + $16 + $18 + $20 + $22;     }  }     if ($1 == "N") {        energy_left[$5] = $7;    }}END {	for (i = 0; i < count; i++){		if ( packet_start[i] == 0 ) {			packet_start[i] = packetid_sentbysender[packet_id[i]];		}	}	for (i = 0; i < count; i++){		if (packet_end[i] != 0){			printf "%d packet: %d sent at %f receieve at %f\n",i , packet_id[i], packet_start[i], packet_end[i];			total_delay = total_delay + packet_end[i] - packet_start[i];			receieved = receieved +1;		}		}	avg_delay = total_delay/count;	printf "sender sent %d AGT packets in total, sink receieved %d\n", n,receieved;	printf "total delay is %f, average delay is %f\n", total_delay, avg_delay; 	printf "End\n";	print avg_delay >> "delay.txt";	printf "First time: %7.1f Last time: %7.1f\n", first_time,last_time;	for (i = 0;i < node_count; i++){		printf "initial energy of node %d is %f\n", i,energy_initial[i];	}	for (i = 0;i < node_count; i++){		printf "left energy of node %d is %f\n", i,energy_left[i];	}	total_energy = 0;	for (i = 0; i < node_count; i ++) {		total_energy += energy_initial[i] - energy_left[i];	}	printf "Total energy consumed: %7.4f energy consumed per node: %7.4f\n", total_energy,total_energy/49;	energy_pernode_event = 	total_energy / 24 / receieved;	printf "energy consumed per node per event: %7.4f\n", energy_pernode_event;	print energy_pernode_event >> "energy.txt"}